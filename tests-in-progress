
  * <span class="note">Grading Note:</span> In the above stories "every page"
    will refer to the following for testing purposes: `/`, `/about`, `/events/new`, `/events/0`,
    `/events/1`, `/events/2`. If you have not yet completed a particular page,
    the page will be skipped. E.g. if you have a `/` page but no `/events/0`
    page yet and `/` has Bootstrap included, the Bootstrap test will pass.
    If one of the six pages exists and does not include Bootstrap, the test
    will not pass.
* As any user, I can visit the url at `/` and see your homepage, it has
  * A an unordered list of events, including their details
    * <span class="note">Grading Note:</span> each event is in an `li`
      element with `class="event"` and `id="event-{id}"`,
      where `{id}` indicates the numerical id of the event. E.g. your
      event list may look something like the following:
      ```markup
        <ul>
          <li class="event" id="event-1">...</li>
          <li class="event" id="event-2">...</li>
        </ul>
      ```
    * Each list element displays pertinent information about the event:
      title, date, and how many people are RSVPd etc. It should include
      the default events that come with the project. E.g. in the above
      example those details should be where you see "...".
    * Every event `li` element should have an HTML5 `time` tag that has a `datetime`
      attribute equal to the time in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601).
      The text of the tag should be the datetime in natural language, including the time.
      For example, it may look like
      ```markup
        <time datetime="2014-11-12 09:30:0.0+07:00">
          Wednesday, Nov 12 at 9:30AM
        </time>
      ```
* The title for each event is a clickable link to the "detail page"
  for that event, which should be at `/events/{{id}}`, where `id`
  refers to the id of the event, e.g. `/events/0` would take me to the
  event with id zero.
* Events that are over are not shown
* As a user, I can visit your API at `/api/events` and retrieve an object
  with key events containing all events in
  [JSON](http://en.wikipedia.org/wiki/JSON) format. For example, the
  response may look akin to the following:
```javascript
  {
    events: [
      {
        id: 0,
        title: "...",
        location: "...",
        ...
      },
      {
        id: 1,
        title: "...",
        location: "...",
        ...
      },
    ]
  }
```
  * I can search for events by submitting a GET request to a URL like `/api/events?search=beach` and only receive back events that have ‘beach’ in the event title.
* As a user I can visit your page for creating new events at `/events/new`
  * It should have a `form` for creating events. The form should have attribute `method="POST"`.
  * I must specify the following attributes of an event: title, location, image, year, month, day, hour, and minute.
    * There must be a form element with `name={{field}}` for each of these, where "{{field}}" is title, location, etc.
    * Every form element requires a `label` element with appropriate `for` attribute. For example:
      ```markup
        <form method="POST">
          <label for="title">Put title here:</label>
          <input type="text" name="title" id="title">
          ...
        </form>
      ```
    * The minute should only have 0, and 30 as selections. (At the hour and half hour).
    * The hour select should be in 24-hour time format: 0-23 are selectable.
    * The month select should have integer value attributes, numbered 0-11, and refer to months by their names: January, February, etc.
    * You should only be able to schedule events in 2015 and 2016
  * When submitted, the form should be validated:
    * The image URL must begin with ‘http://’ or ‘https://’ and end with ‘.gif’ or ‘.png’.
    * The title must be less than 50 characters
    * The location must be less than 50 characters
    * The year must be 2015 or 2016
    * The month must be between 0 to 11, inclusive
    * The hour must be 0-23
    * The minute must be 0 or 30
  * If the submitted form is valid, I am redirected to the detail page for that new event.
    This redirect is accomplished using a ["302" HTTP response](http://en.wikipedia.org/wiki/HTTP_302).
    (See the documentation for the [Express.js response redirect method](http://expressjs.com/api.html#res.redirect))

  * If the form was not valid, I am taken back the form and the errors are shown on the form.
    * The errors should be enumerated in a `ul` element with `class="form-errors"`
    * That `ul` element should have `li` elements for each error. For example, your errors
      may look like this
      ```markup
        <ul class="form-errors">
          <li>Error, the title must be between 0 and 50 characters</li>
        </ul>
      ```
