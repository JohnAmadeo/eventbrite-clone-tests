
  * <span class="note">Grading Note:</span> In the above stories "every page"
    will refer to the following for testing purposes: `/`, `/about`, `/events/new`, `/events/0`,
    `/events/1`, `/events/2`. If you have not yet completed a particular page,
    the page will be skipped. E.g. if you have a `/` page but no `/events/0`
    page yet and `/` has Bootstrap included, the Bootstrap test will pass.
    If one of the six pages exists and does not include Bootstrap, the test
    will not pass.
* Events that are over are not shown
* As a user, I can visit your API at `/api/events` and retrieve an object
  with key events containing all events in
  [JSON](http://en.wikipedia.org/wiki/JSON) format. For example, the
  response may look akin to the following:
```javascript
  {
    events: [
      {
        id: 0,
        title: "...",
        location: "...",
        ...
      },
      {
        id: 1,
        title: "...",
        location: "...",
        ...
      },
    ]
  }
```
  * I can search for events by submitting a GET request to a URL like `/api/events?search=beach` and only receive back events that have ‘beach’ in the event title.
* As a user I can visit your page for creating new events at `/events/new`
    * The minute should only have 0, and 30 as selections. (At the hour and half hour).
    * The hour select should be in 24-hour time format: 0-23 are selectable.
    * The month select should have integer value attributes, numbered 0-11, and refer to months by their names: January, February, etc.
    * You should only be able to schedule events in 2015 and 2016
  * When submitted, the form should be validated:
    * The image URL must begin with ‘http://’ or ‘https://’ and end with ‘.gif’ or ‘.png’.
    * The title must be less than 50 characters
    * The location must be less than 50 characters
    * The year must be 2015 or 2016
    * The month must be between 0 to 11, inclusive
    * The hour must be 0-23
    * The minute must be 0 or 30
  * If the submitted form is valid, I am redirected to the detail page for that new event.
    This redirect is accomplished using a ["302" HTTP response](http://en.wikipedia.org/wiki/HTTP_302).
    (See the documentation for the [Express.js response redirect method](http://expressjs.com/api.html#res.redirect))

  * If the form was not valid, I am taken back the form and the errors are shown on the form.
    * The errors should be enumerated in a `ul` element with `class="form-errors"`
    * That `ul` element should have `li` elements for each error. For example, your errors
      may look like this
      ```markup
        <ul class="form-errors">
          <li>Error, the title must be between 0 and 50 characters</li>
        </ul>
      ```
